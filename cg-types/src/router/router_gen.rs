//! This file is generated by `cg-types` crate.
//! Do not modify it directly.
#![cfg_attr(rustfmt, rustfmt_skip)]

use std::hash::Hash;

use serde::{Deserialize, Serialize};

use super::{ObserverImpl, ResponseRouter, ToResponseNextGen};

pub trait CallHandler {
    fn ping(
        &self,
        params: crate::types::PingParams,
        tx: ObserverImpl<()>,
    );
    fn scrape_website(
        &self,
        params: crate::types::ScrapeWebsiteParams,
        tx: ObserverImpl<()>,
    );
    fn timeline(
        &self,
        params: crate::types::TimelineParams,
        tx: ObserverImpl<crate::types::TimelineResult>,
    );
    fn search(
        &self,
        params: crate::types::SearchParams,
        tx: ObserverImpl<crate::types::SearchResult>,
    );
    fn find_record_for_url(
        &self,
        params: crate::types::FindRecordForURLParams,
        tx: ObserverImpl<crate::types::FindRecordResult>,
    );
    fn check_content_relevance(
        &self,
        params: crate::types::CheckContentRelevanceParams,
        tx: ObserverImpl<crate::types::ContentRelevanceResult>,
    );
    fn parse_time(
        &self,
        params: crate::types::ParseTimeParams,
        tx: ObserverImpl<crate::types::ParseTimeResult>,
    );
    fn record_info(
        &self,
        params: crate::types::RecordInfoParams,
        tx: ObserverImpl<crate::types::RecordInfoResult>,
    );
    fn object_link_info(
        &self,
        params: crate::types::ObjectLinkInfoParams,
        tx: ObserverImpl<crate::types::ObjectLinkInfoResult>,
    );
    fn wip_search(
        &self,
        params: crate::types::WIPSearchParams,
        tx: ObserverImpl<crate::types::WIPSearchResult>,
    );
    fn in_device(
        &self,
        params: crate::types::DeviceStorageCommand,
        tx: ObserverImpl<crate::types::DeviceStorageValue>,
    );
    fn in_synced(
        &self,
        params: crate::types::SyncStorageCommand,
        tx: ObserverImpl<crate::types::SyncStorageValue>,
    );
    fn store_highlight(
        &self,
        params: crate::types::StoreHighlightParams,
        tx: ObserverImpl<crate::types::StoreHighlightResult>,
    );
    fn get_highlights_by_url(
        &self,
        params: crate::types::GetHighlightsByUrlParams,
        tx: ObserverImpl<crate::types::GetHighlightsByUrlResult>,
    );
    fn expand_highlight_neighborhood(
        &self,
        params: crate::types::ExpandHighlightNeighborhoodParams,
        tx: ObserverImpl<crate::types::HighlightNeighborhoodResult>,
    );
    fn refresh_tokens(
        &self,
        params: crate::types::RefreshTokensParams,
        tx: ObserverImpl<()>,
    );
    fn analyze_network(
        &self,
        params: crate::types::AnalyzeNetworkParams,
        tx: ObserverImpl<crate::types::NetworkAnalysisResult>,
    );
    fn store_behavioral_signals(
        &self,
        params: crate::types::StoreBehavioralSignalsParams,
        tx: ObserverImpl<crate::types::StoreBehavioralSignalsResult>,
    );
    fn get_behavioral_guidance_for_page(
        &self,
        params: crate::types::BehavioralGuidanceParams,
        tx: ObserverImpl<crate::types::BehavioralGuidanceResult>,
    );
    fn get_cognition_plan(
        &self,
        params: crate::types::GetCognitionPlanParams,
        tx: ObserverImpl<crate::types::CognitionPlanResult>,
    );
    fn get_cognition_telemetry(
        &self,
        params: crate::types::GetCognitionTelemetryParams,
        tx: ObserverImpl<crate::types::CognitionTelemetrySnapshot>,
    );
    fn get_cognition_introspection(
        &self,
        params: crate::types::GetCognitionIntrospectionParams,
        tx: ObserverImpl<crate::types::CognitionIntrospectionResult>,
    );
    fn get_cognition_causal_graph(
        &self,
        params: crate::types::GetCognitionCausalGraphParams,
        tx: ObserverImpl<crate::types::CognitionCausalGraphResult>,
    );
    fn get_cognition_options(
        &self,
        params: crate::types::GetCognitionOptionsParams,
        tx: ObserverImpl<crate::types::CognitionOptionSetResult>,
    );
    fn get_cognition_pareto(
        &self,
        params: crate::types::GetCognitionParetoParams,
        tx: ObserverImpl<crate::types::CognitionParetoResult>,
    );
    fn calculate_intelligent_prominence(
        &self,
        params: crate::types::CalculateProminenceParams,
        tx: ObserverImpl<crate::types::IntelligentProminenceResult>,
    );
    fn archive_highlight(
        &self,
        params: crate::types::ArchiveHighlightParams,
        tx: ObserverImpl<crate::types::ArchiveHighlightResult>,
    );
    fn analyze_behavioral_network(
        &self,
        params: crate::types::BehavioralNetworkAnalysisParams,
        tx: ObserverImpl<crate::types::BehavioralNetworkAnalysisResult>,
    );
    fn update_behavioral_network_patterns(
        &self,
        params: crate::types::UpdateBehavioralNetworkPatternsParams,
        tx: ObserverImpl<crate::types::UpdateBehavioralNetworkPatternsResult>,
    );
    fn apply_clustering_filter(
        &self,
        params: crate::types::ClusteringFilterParams,
        tx: ObserverImpl<crate::types::ClusteringFilterResult>,
    );
}

/// Request (call) item
#[allow(non_camel_case_types)]
#[derive(Serialize, Deserialize, Debug, Clone)]
pub(crate) enum CallGen {
    /// Retrieve items from the timeline.
    ping(crate::types::PingParams),
    /// Scrape a website
    scrape_website(crate::types::ScrapeWebsiteParams),
    /// Retrieve items from the timeline.
    timeline(crate::types::TimelineParams),
    /// Search for things.
    search(crate::types::SearchParams),
    /// Get current page's record
    find_record_for_url(crate::types::FindRecordForURLParams),
    /// Get current page's record
    check_content_relevance(crate::types::CheckContentRelevanceParams),
    /// Parse a relative time string like "2 weeks ago" and return a timestamp.
    parse_time(crate::types::ParseTimeParams),
    /// Retrieve record full text.
    record_info(crate::types::RecordInfoParams),
    /// Retrieve statement information.
    /// Returns one [`ObjectLinkInfoResult`] with all targets resolved.
    object_link_info(crate::types::ObjectLinkInfoParams),
    /// WIP Implementing a search to learn more about how records currently work.
    wip_search(crate::types::WIPSearchParams),
    /// Retrieve items from the extension storage on this device
    in_device(crate::types::DeviceStorageCommand),
    /// Retrieve items from the extension storage which is synchronized across devices
    in_synced(crate::types::SyncStorageCommand),
    /// Store a highlight in IndexedDB
    store_highlight(crate::types::StoreHighlightParams),
    /// Get highlights for a specific page URL
    get_highlights_by_url(crate::types::GetHighlightsByUrlParams),
    /// Expand the neighborhood around highlight records
    expand_highlight_neighborhood(crate::types::ExpandHighlightNeighborhoodParams),
    /// Refresh tokens
    refresh_tokens(crate::types::RefreshTokensParams),
    /// Analyze the network structure using network analytics
    analyze_network(crate::types::AnalyzeNetworkParams),
    /// Store behavioral signals for machine learning and user behavior analysis
    store_behavioral_signals(crate::types::StoreBehavioralSignalsParams),
    /// Get behavioral guidance for enhancing page analysis
    get_behavioral_guidance_for_page(crate::types::BehavioralGuidanceParams),
    /// Request the latest cognition plan summary from the background service
    get_cognition_plan(crate::types::GetCognitionPlanParams),
    /// Request the latest cognition telemetry summary
    get_cognition_telemetry(crate::types::GetCognitionTelemetryParams),
    /// Fetch introspection diagnostics for the most recent or specified plan
    get_cognition_introspection(crate::types::GetCognitionIntrospectionParams),
    /// Request the latest causal graph snapshot produced by cognition
    get_cognition_causal_graph(crate::types::GetCognitionCausalGraphParams),
    /// Retrieve the latest cognition option statistics
    get_cognition_options(crate::types::GetCognitionOptionsParams),
    /// Retrieve the cognition Pareto frontier snapshot
    get_cognition_pareto(crate::types::GetCognitionParetoParams),
    /// Parameters for calculating intelligent prominence based on network analysis and behavioral patterns
    calculate_intelligent_prominence(crate::types::CalculateProminenceParams),
    /// Archive a highlight in IndexedDB (soft delete)
    archive_highlight(crate::types::ArchiveHighlightParams),
    /// Analyze network with behavioral intelligence for Step 4: Complete Learning Loop
    analyze_behavioral_network(crate::types::BehavioralNetworkAnalysisParams),
    /// Update behavioral network patterns for enhanced analysis
    update_behavioral_network_patterns(crate::types::UpdateBehavioralNetworkPatternsParams),
    /// Apply clustering-based filtering to search terms
    apply_clustering_filter(crate::types::ClusteringFilterParams),
}

/// Response item
#[allow(non_camel_case_types, clippy::large_enum_variant)]
#[derive(Serialize, Deserialize, Debug, Clone)]
#[doc(hidden)]
pub enum ResponseNextGen {
    /// Retrieve items from the timeline.
    ping(()),
    /// Scrape a website
    scrape_website(()),
    /// Retrieve items from the timeline.
    timeline(crate::types::TimelineResult),
    /// Search for things.
    search(crate::types::SearchResult),
    /// Get current page's record
    find_record_for_url(crate::types::FindRecordResult),
    /// Get current page's record
    check_content_relevance(crate::types::ContentRelevanceResult),
    /// Parse a relative time string like "2 weeks ago" and return a timestamp.
    parse_time(crate::types::ParseTimeResult),
    /// Retrieve record full text.
    record_info(crate::types::RecordInfoResult),
    /// Retrieve statement information.
    /// Returns one [`ObjectLinkInfoResult`] with all targets resolved.
    object_link_info(crate::types::ObjectLinkInfoResult),
    /// WIP Implementing a search to learn more about how records currently work.
    wip_search(crate::types::WIPSearchResult),
    /// Retrieve items from the extension storage on this device
    in_device(crate::types::DeviceStorageValue),
    /// Retrieve items from the extension storage which is synchronized across devices
    in_synced(crate::types::SyncStorageValue),
    /// Store a highlight in IndexedDB
    store_highlight(crate::types::StoreHighlightResult),
    /// Get highlights for a specific page URL
    get_highlights_by_url(crate::types::GetHighlightsByUrlResult),
    /// Expand the neighborhood around highlight records
    expand_highlight_neighborhood(crate::types::HighlightNeighborhoodResult),
    /// Refresh tokens
    refresh_tokens(()),
    /// Analyze the network structure using network analytics
    analyze_network(crate::types::NetworkAnalysisResult),
    /// Store behavioral signals for machine learning and user behavior analysis
    store_behavioral_signals(crate::types::StoreBehavioralSignalsResult),
    /// Get behavioral guidance for enhancing page analysis
    get_behavioral_guidance_for_page(crate::types::BehavioralGuidanceResult),
    /// Request the latest cognition plan summary from the background service
    get_cognition_plan(crate::types::CognitionPlanResult),
    /// Request the latest cognition telemetry summary
    get_cognition_telemetry(crate::types::CognitionTelemetrySnapshot),
    /// Fetch introspection diagnostics for the most recent or specified plan
    get_cognition_introspection(crate::types::CognitionIntrospectionResult),
    /// Request the latest causal graph snapshot produced by cognition
    get_cognition_causal_graph(crate::types::CognitionCausalGraphResult),
    /// Retrieve the latest cognition option statistics
    get_cognition_options(crate::types::CognitionOptionSetResult),
    /// Retrieve the cognition Pareto frontier snapshot
    get_cognition_pareto(crate::types::CognitionParetoResult),
    /// Parameters for calculating intelligent prominence based on network analysis and behavioral patterns
    calculate_intelligent_prominence(crate::types::IntelligentProminenceResult),
    /// Archive a highlight in IndexedDB (soft delete)
    archive_highlight(crate::types::ArchiveHighlightResult),
    /// Analyze network with behavioral intelligence for Step 4: Complete Learning Loop
    analyze_behavioral_network(crate::types::BehavioralNetworkAnalysisResult),
    /// Update behavioral network patterns for enhanced analysis
    update_behavioral_network_patterns(crate::types::UpdateBehavioralNetworkPatternsResult),
    /// Apply clustering-based filtering to search terms
    apply_clustering_filter(crate::types::ClusteringFilterResult),
}

pub(crate) fn gen_call<RCtx: Clone + Hash + PartialEq + Eq + Send + Sync + 'static>(
    router: &ResponseRouter<RCtx>,
    id: usize,
    call: CallGen,
    reply_context: RCtx,
    handler: &dyn CallHandler,
) {
    let responder = router.create_responder(id, reply_context);
    match call {
        CallGen::ping(params) => handler.ping(
            params,
            router.create_observer::<()>(responder),
        ),
        CallGen::scrape_website(params) => handler.scrape_website(
            params,
            router.create_observer::<()>(responder),
        ),
        CallGen::timeline(params) => handler.timeline(
            params,
            router.create_observer::<crate::types::TimelineResult>(responder),
        ),
        CallGen::search(params) => handler.search(
            params,
            router.create_observer::<crate::types::SearchResult>(responder),
        ),
        CallGen::find_record_for_url(params) => handler.find_record_for_url(
            params,
            router.create_observer::<crate::types::FindRecordResult>(responder),
        ),
        CallGen::check_content_relevance(params) => handler.check_content_relevance(
            params,
            router.create_observer::<crate::types::ContentRelevanceResult>(responder),
        ),
        CallGen::parse_time(params) => handler.parse_time(
            params,
            router.create_observer::<crate::types::ParseTimeResult>(responder),
        ),
        CallGen::record_info(params) => handler.record_info(
            params,
            router.create_observer::<crate::types::RecordInfoResult>(responder),
        ),
        CallGen::object_link_info(params) => handler.object_link_info(
            params,
            router.create_observer::<crate::types::ObjectLinkInfoResult>(responder),
        ),
        CallGen::wip_search(params) => handler.wip_search(
            params,
            router.create_observer::<crate::types::WIPSearchResult>(responder),
        ),
        CallGen::in_device(params) => handler.in_device(
            params,
            router.create_observer::<crate::types::DeviceStorageValue>(responder),
        ),
        CallGen::in_synced(params) => handler.in_synced(
            params,
            router.create_observer::<crate::types::SyncStorageValue>(responder),
        ),
        CallGen::store_highlight(params) => handler.store_highlight(
            params,
            router.create_observer::<crate::types::StoreHighlightResult>(responder),
        ),
        CallGen::get_highlights_by_url(params) => handler.get_highlights_by_url(
            params,
            router.create_observer::<crate::types::GetHighlightsByUrlResult>(responder),
        ),
        CallGen::expand_highlight_neighborhood(params) => handler.expand_highlight_neighborhood(
            params,
            router.create_observer::<crate::types::HighlightNeighborhoodResult>(responder),
        ),
        CallGen::refresh_tokens(params) => handler.refresh_tokens(
            params,
            router.create_observer::<()>(responder),
        ),
        CallGen::analyze_network(params) => handler.analyze_network(
            params,
            router.create_observer::<crate::types::NetworkAnalysisResult>(responder),
        ),
        CallGen::store_behavioral_signals(params) => handler.store_behavioral_signals(
            params,
            router.create_observer::<crate::types::StoreBehavioralSignalsResult>(responder),
        ),
        CallGen::get_behavioral_guidance_for_page(params) => handler.get_behavioral_guidance_for_page(
            params,
            router.create_observer::<crate::types::BehavioralGuidanceResult>(responder),
        ),
        CallGen::get_cognition_plan(params) => handler.get_cognition_plan(
            params,
            router.create_observer::<crate::types::CognitionPlanResult>(responder),
        ),
        CallGen::get_cognition_telemetry(params) => handler.get_cognition_telemetry(
            params,
            router.create_observer::<crate::types::CognitionTelemetrySnapshot>(responder),
        ),
        CallGen::get_cognition_introspection(params) => handler.get_cognition_introspection(
            params,
            router.create_observer::<crate::types::CognitionIntrospectionResult>(responder),
        ),
        CallGen::get_cognition_causal_graph(params) => handler.get_cognition_causal_graph(
            params,
            router.create_observer::<crate::types::CognitionCausalGraphResult>(responder),
        ),
        CallGen::get_cognition_options(params) => handler.get_cognition_options(
            params,
            router.create_observer::<crate::types::CognitionOptionSetResult>(responder),
        ),
        CallGen::get_cognition_pareto(params) => handler.get_cognition_pareto(
            params,
            router.create_observer::<crate::types::CognitionParetoResult>(responder),
        ),
        CallGen::calculate_intelligent_prominence(params) => handler.calculate_intelligent_prominence(
            params,
            router.create_observer::<crate::types::IntelligentProminenceResult>(responder),
        ),
        CallGen::archive_highlight(params) => handler.archive_highlight(
            params,
            router.create_observer::<crate::types::ArchiveHighlightResult>(responder),
        ),
        CallGen::analyze_behavioral_network(params) => handler.analyze_behavioral_network(
            params,
            router.create_observer::<crate::types::BehavioralNetworkAnalysisResult>(responder),
        ),
        CallGen::update_behavioral_network_patterns(params) => handler.update_behavioral_network_patterns(
            params,
            router.create_observer::<crate::types::UpdateBehavioralNetworkPatternsResult>(responder),
        ),
        CallGen::apply_clustering_filter(params) => handler.apply_clustering_filter(
            params,
            router.create_observer::<crate::types::ClusteringFilterResult>(responder),
        ),
    }
}

// impls
impl ToResponseNextGen for () {
    fn to_response_next_gen(self) -> ResponseNextGen {
        ResponseNextGen::ping(self)
    }
}
impl ToResponseNextGen for crate::types::TimelineResult {
    fn to_response_next_gen(self) -> ResponseNextGen {
        ResponseNextGen::timeline(self)
    }
}
impl ToResponseNextGen for crate::types::SearchResult {
    fn to_response_next_gen(self) -> ResponseNextGen {
        ResponseNextGen::search(self)
    }
}
impl ToResponseNextGen for crate::types::FindRecordResult {
    fn to_response_next_gen(self) -> ResponseNextGen {
        ResponseNextGen::find_record_for_url(self)
    }
}
impl ToResponseNextGen for crate::types::ContentRelevanceResult {
    fn to_response_next_gen(self) -> ResponseNextGen {
        ResponseNextGen::check_content_relevance(self)
    }
}
impl ToResponseNextGen for crate::types::ParseTimeResult {
    fn to_response_next_gen(self) -> ResponseNextGen {
        ResponseNextGen::parse_time(self)
    }
}
impl ToResponseNextGen for crate::types::RecordInfoResult {
    fn to_response_next_gen(self) -> ResponseNextGen {
        ResponseNextGen::record_info(self)
    }
}
impl ToResponseNextGen for crate::types::ObjectLinkInfoResult {
    fn to_response_next_gen(self) -> ResponseNextGen {
        ResponseNextGen::object_link_info(self)
    }
}
impl ToResponseNextGen for crate::types::WIPSearchResult {
    fn to_response_next_gen(self) -> ResponseNextGen {
        ResponseNextGen::wip_search(self)
    }
}
impl ToResponseNextGen for crate::types::DeviceStorageValue {
    fn to_response_next_gen(self) -> ResponseNextGen {
        ResponseNextGen::in_device(self)
    }
}
impl ToResponseNextGen for crate::types::SyncStorageValue {
    fn to_response_next_gen(self) -> ResponseNextGen {
        ResponseNextGen::in_synced(self)
    }
}
impl ToResponseNextGen for crate::types::StoreHighlightResult {
    fn to_response_next_gen(self) -> ResponseNextGen {
        ResponseNextGen::store_highlight(self)
    }
}
impl ToResponseNextGen for crate::types::GetHighlightsByUrlResult {
    fn to_response_next_gen(self) -> ResponseNextGen {
        ResponseNextGen::get_highlights_by_url(self)
    }
}
impl ToResponseNextGen for crate::types::HighlightNeighborhoodResult {
    fn to_response_next_gen(self) -> ResponseNextGen {
        ResponseNextGen::expand_highlight_neighborhood(self)
    }
}
impl ToResponseNextGen for crate::types::NetworkAnalysisResult {
    fn to_response_next_gen(self) -> ResponseNextGen {
        ResponseNextGen::analyze_network(self)
    }
}
impl ToResponseNextGen for crate::types::StoreBehavioralSignalsResult {
    fn to_response_next_gen(self) -> ResponseNextGen {
        ResponseNextGen::store_behavioral_signals(self)
    }
}
impl ToResponseNextGen for crate::types::BehavioralGuidanceResult {
    fn to_response_next_gen(self) -> ResponseNextGen {
        ResponseNextGen::get_behavioral_guidance_for_page(self)
    }
}
impl ToResponseNextGen for crate::types::CognitionPlanResult {
    fn to_response_next_gen(self) -> ResponseNextGen {
        ResponseNextGen::get_cognition_plan(self)
    }
}
impl ToResponseNextGen for crate::types::CognitionTelemetrySnapshot {
    fn to_response_next_gen(self) -> ResponseNextGen {
        ResponseNextGen::get_cognition_telemetry(self)
    }
}
impl ToResponseNextGen for crate::types::CognitionIntrospectionResult {
    fn to_response_next_gen(self) -> ResponseNextGen {
        ResponseNextGen::get_cognition_introspection(self)
    }
}
impl ToResponseNextGen for crate::types::CognitionCausalGraphResult {
    fn to_response_next_gen(self) -> ResponseNextGen {
        ResponseNextGen::get_cognition_causal_graph(self)
    }
}
impl ToResponseNextGen for crate::types::CognitionOptionSetResult {
    fn to_response_next_gen(self) -> ResponseNextGen {
        ResponseNextGen::get_cognition_options(self)
    }
}
impl ToResponseNextGen for crate::types::CognitionParetoResult {
    fn to_response_next_gen(self) -> ResponseNextGen {
        ResponseNextGen::get_cognition_pareto(self)
    }
}
impl ToResponseNextGen for crate::types::IntelligentProminenceResult {
    fn to_response_next_gen(self) -> ResponseNextGen {
        ResponseNextGen::calculate_intelligent_prominence(self)
    }
}
impl ToResponseNextGen for crate::types::ArchiveHighlightResult {
    fn to_response_next_gen(self) -> ResponseNextGen {
        ResponseNextGen::archive_highlight(self)
    }
}
impl ToResponseNextGen for crate::types::BehavioralNetworkAnalysisResult {
    fn to_response_next_gen(self) -> ResponseNextGen {
        ResponseNextGen::analyze_behavioral_network(self)
    }
}
impl ToResponseNextGen for crate::types::UpdateBehavioralNetworkPatternsResult {
    fn to_response_next_gen(self) -> ResponseNextGen {
        ResponseNextGen::update_behavioral_network_patterns(self)
    }
}
impl ToResponseNextGen for crate::types::ClusteringFilterResult {
    fn to_response_next_gen(self) -> ResponseNextGen {
        ResponseNextGen::apply_clustering_filter(self)
    }
}
