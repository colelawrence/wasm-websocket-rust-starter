//! This file is generated by `cg-types` crate.
//! Do not modify it directly.

use serde::{Deserialize, Serialize};

use super::{ObserverImpl, ResponseRouter, ToResponseNextGen};

pub trait CallHandler {
    fn timeline(
        &self,
        params: crate::types::TimelineParams,
        tx: ObserverImpl<crate::types::TimelineResult>,
    );
}

/// Request (call) item
#[allow(non_camel_case_types)]
#[derive(Serialize, Deserialize, Debug, Clone)]
pub(crate) enum CallGen {
    /// Retrieve items from the timeline.
    timeline(crate::types::TimelineParams),
}

/// Response item
#[allow(non_camel_case_types)]
#[derive(Serialize, Deserialize, Debug, Clone)]
#[doc(hidden)]
pub enum ResponseNextGen {
    /// Retrieve items from the timeline.
    timeline(crate::types::TimelineResult),
}

pub(crate) fn gen_call<RCtx: Clone + Hash + PartialEq + Eq + Send + Sync + 'static>(
    router: &ResponseRouter<RCtx>,
    id: usize,
    call: CallGen,
    reply_context: RCtx,
    handler: &dyn CallHandler,
) {
    let responder = router.create_responder(id, reply_context);
    match call {
        CallGen::timeline(params) => handler.timeline(
            params,
            router.create_observer::<crate::types::TimelineResult>(responder),
        ),
    }
}

// impls
impl ToResponseNextGen for crate::types::TimelineResult {
    fn to_response_next_gen(self) -> ResponseNextGen {
        ResponseNextGen::timeline(self)
    }
}
